FUNCTION staff()
    OUTPUT staff_name, staff_id
    OUTPUT "1. Manage my account"
    OUTPUT "2. Students"
    OUTPUT "3. Manage timetable"
    OUTPUT "4. Resources"
    OUTPUT "5. Events"
    OUTPUT "6. Communication"
    OUTPUT "7. Log out"
    OUTPUT "8. Exit program"

    DO
        PROMPT "Enter option"
        INPUT choice
        IF choice == 1 THEN
            CALL staff_manage_acc()
        ELSE IF choice == 2 THEN
            CALL student_rec()
        ELSE IF choice == 3 THEN
            CALL manage_timetable()
        ELSE IF choice == 4 THEN
            CALL resources()
        ELSE IF choice == 5 THEN
            CALL events()
        ELSE IF choice == 6 THEN
            CALL communication()
        ELSE IF choice == 7 THEN
            CALL main()
        ELSE IF choice == 8 THEN
            EXIT program
        ELSE
            REPROMPT USER "Invalid choice. Please try again."
        END IF
    WHILE condition choice is False
    RETURN 


FUNCTION staff_manage_acc()
    OPEN "staffs.txt" in read mode as file
        OUTPUT staff_id, staff_name, password, phone_number, email, gender
        OUTPUT "1. Change password"
        OUTPUT "2. Update phone number"
        OUTPUT "3. Update email"
        OUTPUT "4. Back"

        DO
            PROMPT "Enter option"
                INPUT choice
                IF choice == 1 THEN
                    CALL change_password()
                ELSE IF choice == 2 THEN
                    CALL update_phone()
                ELSE IF choice == 3 THEN
                    CALL update_email()
                ELSE IF choice == 4 THEN
                    CALL staff()
                ELSE
                    REPROMPT USER "Invalid choice. Please try again."
                END IF
        WHILE condition choice is False
    RETURN


FUNCTION change_password()
    OPEN "staffs.txt" in write mode as file
        INPUT new_password
        INPUT confirm_password

        IF new_password equals confirm_password THEN
            UPDATE password for the logged-in staff_id with new_password
            SAVE changes to the file
            OUTPUT "Password updated successfully."
        ELSE IF input is 0 THEN
            CALL staff_manage_acc()
        ELSE
            OUTPUT "Passwords do not match. Please try again."
        END IF
    RETURN


FUNCTION update_phone()
    OPEN "staffs.txt" in write mode as file
        INPUT new_phone
        IF input is 0 THEN
            CALL staff_manage_acc()
        ELSE
            UPDATE phone for the logged-in staff_id with new_phone
            SAVE changes to the file
            OUTPUT "Phone number updated successfully."
            CALL staff_manage_acc()
        END IF
    RETURN


FUNCTION update_email()
    OPEN "staffs.txt" in write mode as file
    INPUT new_email
    IF input is 0 THEN
        CALL staff_manage_acc()
    ELSE
        UPDATE email for the logged-in staff_id with new_email
        SAVE changes to the file
        OUTPUT "Email updated successfully."
        CALL staff_manage_acc()
    RETURN


FUNCTION student_rec()
    OPEN "students.txt" in read mode as student and OPEN "course_enrollments.txt" in read mode as enroll OPEN "courses.txt" in read mode as courses
        OUTPUT "1. Students' course registration"
        OUTPUT "2. Transfer course"
        OUTPUT "3. Course withdrawal"
        OUTPUT "0. Back"
        DO
            INPUT choice
            IF choice == 1 THEN
                CALL stu_course_reg()
            ELSE IF choice == 2 THEN
                CALL stu_trans_course()
            ELSE IF choice == 3 THEN
                CALL stu_course_withdraw()
            ELSE IF choice == 0 THEN
                CALL staff()
            ELSE
                REPROMPT USER "Invalid choice. Please try again."
            END IF
        WHILE condition choice is False
    RETURN


FUNCTION stu_course_reg()
    OPEN "classes.txt" as class in write mode
        INPUT student_id, class_id
        IF input is 0 THEN
            CALL student_rec
        ELSE
            SET course_enroll_status to "active"
            OUTPUT student_name "Successfully enrolled to" course_title
        END WHILE
    RETURN


FUNCTION stu_trans_course()
    INPUT search_id
    IF input is 0 THEN
        CALL student_rec()
    ELSE
        FOR each line in enroll
            IF search_id == student_id THEN
            OUTPUT row
        PROMPT "Course from (course_enrollment_id): "
        PROMPT "Transfer to (course_teacher_id): "
        INPUT course_from, transfer_to
        FOR each line in enroll
            IF course_from == course_enrollment_id
                SET course_enroll_status = "inactive"
            ELSE
                REPROMPT course_from
        OPEN "classes.txt" as reading in read mode
            FOR each line in reading
                IF course_to == course_teacher_id
                    OPEN "course_enrollments.txt" as writing in append mode
                        APPEND student_id                
                ELSE
                    REPROMPT course_to
    END IF
    RETURN


FUNCTION stu_course_withdraw()
    INPUT student_id
    IF input is 0 THEN
        CALL student_rec()
    ELSE
        OPEN "course_enrollments.txt" in read mode as enroll
            FOR each line in enroll
                IF student_id equals to student_id in enroll
                    OUTPUT line
            INPUT course_teacher_id
            OPEN "course_enrollments.txt" in write mode as writing
                SET course_enroll_status == inactive
    END IF
    RETURN


FUNCTION manage_timetable()
    INPUT class_id
    OPEN "timetable.txt" in read mode as timetable
        FOR each line in timetable
            IF course_teacher_id equals to course_teacher_id in timetable
                OUTPUT line
            ELSE
                REPROMPT "Enter class id"
            END IF
        OUTPUT "1. Change day"
        OUTPUT "2. Change time"
        OUTPUT "3. Change location"
        OUTPUT "0. Back"

        OPEN "timetable.txt" in write mode as writing
        DO
            PROMPT "Enter option"
            INPUT choice
            IF choice == 1 THEN
                INPUT new_day
                    UPDATE day to new_day
            ELSE IF choice == 2 THEN
                INPUT new_start_time, new_end_time
                    UPDATE start_time to new_start_time, end_time to new_end_time
            ELSE IF choice == 3 THEN
                INPUT new_location_id
                    UPDATE location_id to new_location_id
            ELSE IF choice == 0 THEN
                CALL staff()
            ELSE
                REPROMPT USER "Invalid choice. Please try again."
            END IF
        WHILE condition choice is False     
    RETURN


FUNCTION resources()
    OUTPUT "1. View resources"
    OUTPUT "2. Add new resource"
    OUTPUT "3. Update resource details"
    OUTPUT "4. Delete resource"
    OUTPUT "5. Split resources"
    OUTPUT "6. Maintenance management"
    OUTPUT "7. Generate reports"
    OUTPUT "0. Back"

    DO
        PROMPT "Enter option"
        INPUT choice
        IF choice == 1 THEN
            CALL view_resources()
        ELSE IF choice == 2 THEN
            CALL new_resources()
        ELSE IF choice == 3 THEN
            CALL update_resources()
        ELSE IF choice == 4 THEN
            CALL delete_resources()
        ELSE IF choice == 5 THEN
            CALL split_resources()
        ELSE IF choice == 6 THEN
            CALL maintenance()
        ELSE IF choice == 7 THEN
            CALL resource_report()
        ELSE IF choice == 0 THEN
            CALL staff()
        ELSE
            REPROMPT USER "Invalid choice. Please try again."
        END IF
    WHILE conditon choice is False
    RETURN


FUNCTION view_resources()
    OUTPUT "1. View all resources"
    OUTPUT "2. Search by id"
    OUTPUT "3. Search by name"
    OUTPUT "4. Filter by type"
    OUTPUT "5. Filter by condition"
    OUTPUT "6. Filter by location"
    OUTPUT "0. Back"
    OPEN "resources.txt" in read mode as file
        DO
            PROMPT "Enter option"
            INPUT choice
            IF choice == 1 THEN
                FOR each line in file
                    OUTPUT line
            ELSE IF choice == 2 THEN
                INPUT id
                FOR each line in file
                    IF id == resource_id THEN
                        OUTPUT line
                    ELSE
                        OUTPUT "Resource not found"
            ELSE IF choice == 3 THEN
                INPUT name
                FOR each line in file
                    IF name == resource_name THEN
                        OUTPUT line
                    ELSE
                        OUTPUT "Resource not found"
            ELSE IF choice == 4 THEN
                INPUT type
                FOR each line in file
                    IF type == type in file
                        OUTPUT line
                    ELSE
                        OUTPUT "Type not found"
            ELSE IF choice == 5 THEN
                INPUT condition
                FOR each line in file
                    IF condition == condition in file
                        OUTPUT line
                    ELSE
                        OUTPUT "Condition not found"
            ELSE IF choice == 6 THEN
                INPUT location_id
                FOR each line in file
                    IF location_id == location_id in file
                        OUTPUT line
                    ELSE
                        OUTPUT "Location not found"
            ELSE IF choice == 0 THEN
                CALL resources()
            ELSE
                REPROMPT USER "Invalid choice. Please try again."
            END IF
        WHILE condition choice is False
    RETURN


FUNCTION new_resources()
        OPEN "resoruces.txt" in append mode as file
            INPUT resource_name, resource_type, condition, quantity, new_location_id
            IF input is 0 THEN
                CALL resources()
            ELSE
                APPEND resource_name, resource_type, condition, quantity, new_location_id
                OUTPUT "Resource(s) successfully added"
            CALL resources()
    RETURN


FUNCTION update_resources()
    OPEN "resources.txt" in read mode as reading
        SEARCH resource_id
        IF resource_id is in reading 
            OUTPUT "1. Update name"
            OUTPUT "2. Update type"
            OUTPUT "3. Update condition"
            OUTPUT "4. Update quantity"
            OUTPUT "5. Update location"
            OUTPUT "0. Back"
        ELSE
            OUTPUT "Resource unavailable"
        END IF
    INPUT choice
    OPEN "resources.txt" in write mode as writing
        DO 
            IF choice == 1 THEN
                INPUT new_name
                UPDATE resource_name = new_name
            ELSE IF choice == 2 THEN
                INPUT new_type
                UPDATE resource_type = new_type
            ELSE IF choice == 3 THEN
                INPUT new_condition
                UPDATE condition = new_condition
            ELSE IF choice == 4 THEN
                INPUT new_quantity
                UPDATE quantity - new_quantity
            ELSE IF choice == 5 THEN
                INPUT new_location
                UPDATE location_id = new_location
            ELSE IF choice == 0 THEN
                CALL resources()
        WHILE condition choice is False
    RETURN


FUNCTION delete_resource()
    INPUT search_id
        IF input is 0 THEN 
            CALL resources()
        ELSE
            OPEN "resources.txt" in read mode as file   
                INPUT search_id
                FOR each line in file   
                    IF line == search_id    
                        DELETE line
                    ELSE 
                        OUTPUT "Resource not found"
        END IF 
    RETURN


FUNCTION split_resources()
    INPUT search_id, number_to_split
    IF input is 0 THEN
        CALL resources()
    ELSE
        OPEN "resources.txt" in read mode as file   
            FOR each line in file   
                IF search_id == resource_id and number_to_split < quantity
                    OPEN "resources.txt" in write mode as writing
                        UPDATE quantity = quantity - number_to_split
                        APPEND new_resouce_id, quantity
                ELSE
                    OUTPUT "Resource not available"
                    CALL resources()
                END IF
    END IF
    RETURN


FUNCTION maintenance()
    OUTPUT "1. Log maintenance"
    OUTPUT "2. View maintenance history"
    OUTPUT "3. Update maintenance status"
    OUTPUT "4. Search maintenance record"
    OUTPUT "5. Upcoming Maintenance Tasks"
    OUTPUT "0. Back"

    DO 
        PROMPT "Enter option"
        INPUT choice
        IF choice == 1 THEN
            CALL log_maintenance()
        ELSE IF choice == 2 THEN
            CALL view_maintenance_history()
        ELSE IF choice == 3 THEN
            CALL update_maintrenance_status()
        ELSE IF choice == 4 THEN
            CALL search_maintenance()
        ELSE IF choice == 5 THEN
            CALL generate_maintenance_report()
        ELSE IF choice == 6 THEN
            CALL upcoming_maintenance()
        ELSE IF choice == 0 THEN
            EXIT program
        ELSE
            REPROMPT USER "Invalid choice. Please try again."
        END IF
    WHILE condition choice is False
    RETURN


FUNCTION log_maintenance()
    INPUT resource_id, maintenance_date, maintenance_type, maintenance_status, cost, notes
    IF input is 0 THEN
        CALL maintenance()
    ELSE
        OPEN "maintenance.txt" in append mode as maintenance
            WRITE resource_id, maintenance_date, maintenance_type, maintenance_status, cost, notes
        OUTPUT "Maintenance logged successfully."
        CALL maintenance()
    END IF
    RETURN
    

FUNCTION view_maintenance_history()
    INPUT resource_id
    IF input is 0 THEN
        CALL maintenance()
    ELSE
        OPEN "maintenance.txt" in read mode as maintenance
            FOR each line in maintenance
                IF id equals resource_id THEN
                    OUTPUT line
                END IF
        CALL maintenance()
    RETURN


FUNCTION update_maintenance_status()
    INPUT maintenance_id, new_status
    IF input is 0 THEN
        CALL maintenance()
    ELSE
        OPEN "maintenance.txt" in read mode as maintenance
            FOR each line in maintenance
                IF id equals maintenance_id THEN
                    UPDATE status into new_status
                    OUTPUT "Maintenance status updated successfully."
                ELSE
                    OUTPUT "Maintenance id not found"
                END IF
        CALL maintenance()
    RETURN


FUNCTION search_maintenance()
    INPUT search_term
    IF input is 0 THEN
        OPEN "maintenance.txt" in read mode as maintenance
            FOR each line in maintenance
                IF search_term exists in line THEN
                    OUTPUT line
                ELSE
                    OUTPUT "Search does not exist"
                END IF
        CALL maintenance()
    RETURN


FUNCTION upcoming_maintenance_tasks()
    OPEN "maintenance.txt" in read mode as maintenance
        FOR each line in maintenance
            IF status == "Pending" AND date > CURRENT_DATE THEN
                OUTPUT line
            END IF
    RETURN


FUNCTION events()
    OUTPUT "1. Create New Event"
    OUTPUT "2. Edit Event"
    OUTPUT "3. Delete Event"
    OUTPUT "4. View All Events"
    OUTPUT "5. Filter Events"
    OUTPUT "6. Search Events"
    OUTPUT "0. Back"

    DO
        PROMPT "Enter option"
        INPUT choice
        IF choice == 1 THEN
            CALL new_event()
        ELSE IF choice == 2 THEN
            CALL edit_event()
        ELSE IF choice == 3 THEN
            CALL delete_event()
        ELSE IF choice == 4 THEN
            CALL all_event()
        ELSE IF choice == 5 THEN
            CALL filter_event()
        ELSE IF choice == 6 THEN
            CALL search_event()
        ELSE IF choice == 0 THEN
            CALL staff()
        ELSE
            REPROMPT USER "Invalid choice. Please try again."
        END IF
    WHILE condition choice is False
    RETURN


FUNCTION new_event()
    OPEN "event.txt" in append mode as file
        IF input is 0 THEN
            CALL events()
        ELSE
            INPUT event_name, event_domain, event_type, max_attendees
            APPEND event_name, event_domain, event_type, max_attendees
            OUTPUT "Event successfully added"
    RETURN


FUNCTION edit_event()
    OPEN "event.txt" in read mode as reading
        SEARCH event_id
        IF event_id is in reading 
            OUTPUT "1. Update name"
            OUTPUT "2. Update domain"
            OUTPUT "3. Update type"
            OUTPUT "4. Update timetable"
            OUTPUT "0. Back"
        ELSE
            OUTPUT "Resource unavailable"
        END IF
    INPUT choice
    OPEN "resources.txt" in write mode as writing
        DO 
            IF choice == 1 THEN
                INPUT new_name
                UPDATE event_name = new_name
            ELSE IF choice == 2 THEN
                INPUT new_domain
                UPDATE event_domain = new_domain
            ELSE IF choice == 3 THEN
                INPUT new_type
                UPDATE type = new_type
            ELSE IF choice == 4 THEN
                INPUT new_timetable_id
                UPDATE timetable_id = new_timetable_id
            ELSE IF choice == 0 THEN
                CALL events()
        WHILE condition choice is False
    RETURN


FUNCTION delete_event()
    INPUT search_id
    OPEN "event.txt" in read mode as file   
        INPUT search_id
        FOR each line in file   
            IF line == search_id    
                DELETE line
            ELSE 
                OUTPUT "Event not found"
            END IF
        CALL event()
    RETURN


FUNCTION all_event()
    OPEN "event.txt" in read mode as file
        FOR each line in file
            OUTPUT line
    RETURN


FUNCTION filter_event()
    OUTPUT "Filter Events:"
    OUTPUT "1. By Domain (Academic/Extracurricular)"
    OUTPUT "2. By Type (Conference, Seminar, etc.)"
    OUTPUT "0. Back"

    INPUT choice

    DO
        IF choice == 1 THEN
            INPUT domain
            OPEN "events.csv" in read mode as events
                FOR each line in events
                    IF event_domain matches domain THEN
                    OUTPUT event details
                    END IF
            CLOSE events
        ELSE IF choice == 2 THEN
            INPUT event_type
            OPEN "events.csv" in read mode as events
                FOR each line in events
                    IF event_type matches THEN
                        OUTPUT event details
                    END IF
            CLOSE events
        ELSE IF choice == 0 THEN
            CALL event()
        ELSE
            OUTPUT "Invalid choice. Try again."
        END IF
    WHILE condition choice is False
    RETURN


FUNCTION search_event()
    OUTPUT "Search Events:"
    INPUT keyword
    OPEN "events.txt" in read mode as events
        FOR each line in events
            IF keyword matches any event attribute THEN
                OUTPUT event details
            ELSE
                OUTOUT "Event not found"
            END IF
    CALL events()
    RETURN


FUNCTION communication()
    OUTPUT "1. General feedbacks"
    OUTPUT "2. Course feedbacks"
    OUTPUT "3. Teacher feedbacks"

    DO
        PROMPT "Enter option"
        INPUT choice
        IF choice == 1 THEN
            CALL general_feedbacks()
        ELSE IF choice == 2 THEN
            CALL course_feedbacks()
        ELSE IF choice == 3 THEN
            CALL teacher_feedbacks()
        ELSE IF choice == 0 THEN
            CALL staff()
        ELSE
            REPROMPT USER "Invalid choice. Please try again."
        END IF
    WHILE condition choice is False
    RETURN 


FUNCTION general_feedbacks()
    OPEN "feedbacks.txt" in read mode as feedback
        FOR each line in feedback
            IF target_id is general THEN
                OUTPUT line
            ELIF input is 0 THEN
                CALL communication()
            END IF
    RETURN


FUNCTION course_feedbacks()
    OPEN "feedbacks.txt" in read mode as feedback
        FOR each line in feedback
            IF target_id is course_id THEN
                OUTPUT line
            ELIF input is 0 THEN
                CALL communication()
            END IF
    RETURN


FUNCTION teacher_feedbacks()
    OPEN "feedbacks.txt" in read mode as feedback
        FOR each line in feedback
            IF target_id is teacher_id THEN
                OUTPUT line
            ELIF input is 0 THEN
                CALL communication()
            END IF
    RETURN